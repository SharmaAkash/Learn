diff --git a/Learning/.classpath b/Learning/.classpath
new file mode 100644
index 0000000..fb565a5
--- /dev/null
+++ b/Learning/.classpath
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/Learning/.gitignore b/Learning/.gitignore
new file mode 100644
index 0000000..5e56e04
--- /dev/null
+++ b/Learning/.gitignore
@@ -0,0 +1 @@
+/bin
diff --git a/Learning/.project b/Learning/.project
new file mode 100644
index 0000000..1cf371f
--- /dev/null
+++ b/Learning/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>Learning</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/Learning/.settings/org.eclipse.jdt.core.prefs b/Learning/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..7341ab1
--- /dev/null
+++ b/Learning/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.7
diff --git a/Learning/src/datastructure/graph/Graph.java b/Learning/src/datastructure/graph/Graph.java
new file mode 100644
index 0000000..17dbdaf
--- /dev/null
+++ b/Learning/src/datastructure/graph/Graph.java
@@ -0,0 +1,5 @@
+package datastructure.graph;
+
+public class Graph {
+
+}
diff --git a/Learning/src/datastructure/graph/Node.java b/Learning/src/datastructure/graph/Node.java
new file mode 100644
index 0000000..26b0fe5
--- /dev/null
+++ b/Learning/src/datastructure/graph/Node.java
@@ -0,0 +1,5 @@
+package datastructure.graph;
+
+public class Node {
+
+}
diff --git a/Learning/src/datastructure/stack/MinStackNode.java b/Learning/src/datastructure/stack/MinStackNode.java
new file mode 100644
index 0000000..40042fe
--- /dev/null
+++ b/Learning/src/datastructure/stack/MinStackNode.java
@@ -0,0 +1,12 @@
+package datastructure.stack;
+
+public class MinStackNode extends StackNode {
+    
+	int minValue;
+	
+	public MinStackNode(int x) {
+		super(x);
+		this.minValue = x;		
+	}
+
+}
diff --git a/Learning/src/datastructure/stack/Stack.java b/Learning/src/datastructure/stack/Stack.java
new file mode 100644
index 0000000..102678e
--- /dev/null
+++ b/Learning/src/datastructure/stack/Stack.java
@@ -0,0 +1,37 @@
+package datastructure.stack;
+
+public class Stack {
+   StackNode top;
+   
+   public Stack(StackNode n){
+	  top = n;
+	  top.next = null;
+   }
+   
+   public void push(StackNode n){
+	   if(top == null)
+	   {
+		   top = n;
+		   top.next = null;		   
+	   }
+	   else{
+		   n.next = top;
+		   top = n;
+	   }
+   }
+   
+   public StackNode pop()
+   {
+	   StackNode poppedNode = top;
+	   top = top.next;
+	   return poppedNode;
+   }
+   
+   public void printStack(){
+	   StackNode n = top;
+	   while(n!=null){
+		   System.out.println(n.data);
+		   n = n.next;
+	   }
+   }
+}
diff --git a/Learning/src/datastructure/stack/StackNode.java b/Learning/src/datastructure/stack/StackNode.java
new file mode 100644
index 0000000..2768f7d
--- /dev/null
+++ b/Learning/src/datastructure/stack/StackNode.java
@@ -0,0 +1,11 @@
+package datastructure.stack;
+
+public class StackNode {
+	int data;
+	StackNode next;	
+	
+	public StackNode(int x){
+		this.data = x;
+		this.next = null;
+	}
+}
diff --git a/Learning/src/datastructure/tree/BTreeNode.java b/Learning/src/datastructure/tree/BTreeNode.java
new file mode 100644
index 0000000..957685d
--- /dev/null
+++ b/Learning/src/datastructure/tree/BTreeNode.java
@@ -0,0 +1,13 @@
+package datastructure.tree;
+
+public class BTreeNode extends TreeNode{
+
+	BTreeNode left;
+	BTreeNode right;
+    
+	
+    public void addChild(BTreeNode x, BTreeNode y) {    	
+    	super.addChild(x);
+    	super.addChild(y);
+    }
+}
diff --git a/Learning/src/datastructure/tree/TreeNode.java b/Learning/src/datastructure/tree/TreeNode.java
new file mode 100644
index 0000000..69bd79e
--- /dev/null
+++ b/Learning/src/datastructure/tree/TreeNode.java
@@ -0,0 +1,16 @@
+package datastructure.tree;
+
+import java.util.List;
+
+public abstract class TreeNode {
+  public Object obj;
+  public List<TreeNode> children; 
+  
+  public int numOfChildren(){
+	  return children.size();
+  }
+  
+  public void addChild(TreeNode x){
+	  children.add(x);
+  }
+}
diff --git a/Learning/src/javaBasics/ObjectBasics.java b/Learning/src/javaBasics/ObjectBasics.java
new file mode 100644
index 0000000..644cdc6
--- /dev/null
+++ b/Learning/src/javaBasics/ObjectBasics.java
@@ -0,0 +1,35 @@
+package javaBasics;
+
+/**
+ * 
+ * @author Akash
+ *  This class contains examples of 
+ *  1) hashCode
+ *  2) equals method
+ */
+public class ObjectBasics {
+	
+	public void ObjecBasics(){
+		System.out.println("HashCode of this object is : "+this.toString());
+	}
+	
+	public static void learnEquals(){
+		String first = "Akash";
+		String second = new String("Akash");
+		if(first.equals(second))
+			System.out.println("String variables are equal based on their content !");
+		
+		StringBuilder sbFirst = new StringBuilder("Sharma");
+		StringBuilder sbSecond = new StringBuilder("Sharma");
+		if(!sbFirst.equals(sbSecond))
+			System.out.println("StringBuilder variables are equal based on default Object " +
+					"implementation of equals method !");
+		
+		
+			
+		
+		
+	}
+	
+
+}
diff --git a/Learning/src/misc/ArrayProblems.java b/Learning/src/misc/ArrayProblems.java
new file mode 100644
index 0000000..3a12bf3
--- /dev/null
+++ b/Learning/src/misc/ArrayProblems.java
@@ -0,0 +1,43 @@
+package misc;
+
+public class ArrayProblems {
+
+	/*
+	 * Given a sorted array and a number n, find a number from the array closest
+	 * to n
+	 */
+	public int findClosest(int ar[], int x) {
+		int retVal = 0;
+		int begin = 0, end = ar.length - 1;
+		while (begin <= end) {
+			int mid = begin + (end - begin) / 2;
+			
+			if(x <= ar[begin])
+				return ar[begin];
+			if( x >= ar[end])
+				return ar[end];
+
+			if (ar[mid] == x) 
+			{
+				return ar[mid];
+			} 
+			else if (ar[mid] < x) 
+			{
+				if(((mid+1)<=end) && (Math.abs(x-ar[mid]) < Math.abs(ar[mid+1]-x)))
+					return ar[mid];
+				else
+					begin = mid + 1;						
+				
+			} 
+			else 
+			{
+				if(((mid-1)>=begin) && (Math.abs(ar[mid]-x) < Math.abs(ar[mid-1]-x)))
+					return ar[mid];
+				else
+					end = mid - 1;
+			}
+		}
+		return -1;
+	}
+	
+}
diff --git a/Learning/src/misc/Singleton.java b/Learning/src/misc/Singleton.java
new file mode 100644
index 0000000..e69b3e6
--- /dev/null
+++ b/Learning/src/misc/Singleton.java
@@ -0,0 +1,46 @@
+package misc;
+
+public class Singleton {
+	
+	/* Singleton implementation NOT thread safe*/
+	private static Singleton instance = null;	
+	private Singleton(){		
+	}
+
+	public static Singleton getInstance() {
+		if(instance == null)
+			instance = new Singleton();
+		return instance;
+	}
+	
+	/* ************************************************************************* */	
+	/* Singleton implementation thread safe but with performance overhead due to synchronized
+	 * with each getter call*/
+	/*
+	private static Singleton instance = null;	
+	private Singleton(){		
+	}
+
+	public static Singleton getInstance() {
+		if(instance == null)
+			instance = new Singleton();
+		return instance;
+	}
+	*/
+	
+	/* ************************************************************************* */	
+	/* Singleton implementation thread safe but with performance overhead due to synchronized
+	 * with each getter call*/
+	/*
+	private static Singleton instance = null;	
+	private Singleton(){		
+	}
+
+	public static Singleton getInstance() {
+		if(instance == null)
+			instance = new Singleton();
+		return instance;
+	}
+	*/
+
+}
diff --git a/Learning/src/test/Run.java b/Learning/src/test/Run.java
new file mode 100644
index 0000000..4550e12
--- /dev/null
+++ b/Learning/src/test/Run.java
@@ -0,0 +1,27 @@
+package test;
+import javaBasics.ObjectBasics;
+import datastructure.stack.*;
+import misc.ArrayProblems;
+
+public class Run {
+
+	public static void main(String[] args){
+		/*ObjectBasics ob = new ObjectBasics();
+		//javaBasics.ObjectBasics.learnEquals();
+		
+		int ar[]={2,5,7,12,21,23,26,29,34,67,77,90};
+		ArrayProblems ap = new ArrayProblems();
+		System.out.println(ap.findClosest(ar,16));*/
+		
+		StackNode n = new StackNode(5);
+		Stack st = new Stack(n);
+		int ar[]={2,7,1,45,23,44,7};
+		for(int i = 0;i<ar.length; i++){
+			StackNode newNode = new StackNode(ar[i]);
+			st.push(newNode);
+		}
+		st.printStack();
+		
+		
+	}
+}